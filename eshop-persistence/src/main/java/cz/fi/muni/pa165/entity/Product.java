package cz.fi.muni.pa165.entity;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.validation.constraints.NotNull;
import java.util.Date;
import javax.persistence.Entity;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

@Entity
public class Product {
		//TODO Map class Product to be an entity with the following attributes:
		// * id - autogenerated @Id using IDENTITY column
		// * name - nonnullable, unique
		// * color - you will have to create new ENUM for this
		// * java.util.Date addedDate - this field should contain only date in the database. Use @Temporal annotation
    
        @Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;
	
	@NotNull
	@Column(nullable=false,unique=false)
	private String name;
        
        @Temporal(TemporalType.DATE)
        private Date addedDate;
        
        @Column(nullable=true,unique=false)
        private Color color;

	public Product(String name, Color color, Date addedDate) {
                this.name = name;
                this.color = color;
                this.addedDate = addedDate;     
	}

    public Product(String guitar, java.awt.Color BLACK, Date date) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public Product() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
        
        public String getName() {
		return name;
	}

	public Long getId() {
		return id;
	}
        
        public Color getColor() {
		return color;
	}
        
        public Date getAddedDate() {
		return addedDate;
	}
        
        public void setName(String name) {
		this.name = name;
	}
       
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (! (obj instanceof Product))
			return false;
		Product other = (Product) obj;
		if (name == null) {
			if (other.getName() != null)
				return false;
		} else if (!name.equals(other.getName()))
			return false;
		return true;
	}
        
	
}
